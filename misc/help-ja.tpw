#! Tokyo Promenadeの使い方
#c 2009-08-01T10:13:28+09:00
#o admin
#t *,help

軽量コンテンツ管理システムTokyo Promenadeにようこそ。この記事では、Tokyo Promenadeの使い方を簡単に説明します。

* Tokyo Promenadeとは

Tokyo Promenade（以下TPと呼びます）はWeb用の[[コンテンツ管理システム|wpja:コンテンツ管理システム]]（CMS）の一種です。すなわち、Web上のコンテンツを閲覧したり作成したり編集したりする操作をWebインターフェイスで完結させて、Webコンテンツの管理を容易にするための仕組みです。ユーザ管理機能やファイルアップロード機能も備えています。

TPの製品コンセプトは、「[[LaTeX|wpja:LaTeX]]っぽい[[Wiki|wpja:Wiki]]っぽいCMS」ということです。LaTeXのように論理的な思考を記録するのに必要十分な機能性とできるだけ単純なデータ構造を追求するとともに、Wiki記法とハイパーリンクを駆使することで直感的かつ効率的な情報整理を行うことができるようにしています。TPのユーザーインターフェイスには余計な装飾がありませんし、Wiki記法はテキストエディタで執筆したり校正したりしやすいように設計されています。出力されるHTMLはXHTML 1.0 StrictのDTDに準拠するとともに、アクセシビリティについても配慮しています。

TPはWikiの一種ですから、ユーザの皆さんで自由に記事を投稿したり編集したりして情報共有をするために利用することができます。各記事にわかりやすい名前をつけて、その名前を使って記事同士のハイパーリンクを張ることで情報を整理することもできます。また、記事を新着順もしくは更新日時順に表示する機能を活用して、掲示板のように使うこともできます。記事に簡単にコメントをつける機能もあるので、ブログのように使うこともできます。TPを使えば、HTMLを自分で書かずに、わかりやすく表現力豊かなWebサイトを構築することができます。

* 記事を読むには

あなたが今見ているこの文書がまさにTP上の記事のひとつです。通常のWebページと同じく、記事の中にあるハイパーリンクをたどることで関連する文書を次々と閲覧していくことができます。[[トップページ|param:]]にあるナビゲーションから関連するページを探すのもよいでしょう。

各記事の名前（タイトル）に張られたリンクを選択すると、その記事のみからなるページが表示されます。ブックマークしたり友達にその記事を教えたりする際にはそのページのURLを使ってください。

** 記事を検索するには

ページ上部のナビゲーションバーにある「[#[[Search|param:act=search]]#]」リンクを選択すると、記事の検索ページに移動します。検索ページにある入力フォームに検索語を入力して「[#search#]」ボタンを押すと、入力した文字列を名前もしくは本文に含む記事が検索されて該当の一覧が表示されます。検索対象や並び順を変更することもできます。

検索ページで検索文字列を入力せずに「[#search#]」ボタンを押すと、全ての記事が該当して指定した並び順で提示されます。この挙動を利用すると、新着記事の一覧や最近に更新された記事の一覧を確認することができます。

* ログインとログアウト

コンテンツの編集を行う際には、ログインが必要となります。ナビゲーションバーにある「[#[[Login|param:act=login]]#]」リンクを選択すると、ユーザ情報を入力するログインページに移動します。そこにユーザ名とパスワードを入力して「[#submit#]」ボタンを押してログインしてください。ログインすると、登録ユーザにのみ許される機能へのリンクがページ上部のナビゲーションバーに表示されるようになります。一連の編集作業が終わった際には「[#Logout#]」リンクからログアウトしてください。

ユーザアカウントを持っていない人はログインできません。ユーザアカウントの発行および変更についてはこのサイトの管理者に依頼してください。

* 記事を書くには

ナビゲーションバーにある「[#[[Post|param:act=edit]]#]」リンクを選択すると、新しい記事を作成する編集ページに移動します。編集ページで、記事の名前と本文を入力してから、「[#submit#]」ボタンを押してください。入力した内容の記事が作成されます。既存の記事を編集するには、ナビゲーションバーにある「[#Edit#]」リンクを選択します。

各記事には名前が必須属性となっています。入力フォームの冒頭に「[##!#]」で始まる行がありますが、そこに記事の名前を入力してください。記事には以下の属性をつけることができます。名前以外の属性は省略可能です。

- [*[##!#]*] : 記事の名前。
- [*[##c#]*] : 記事の作成日時。W3CDTF形式で指定します。
- [*[##m#]*] : 記事の最終更新日時。W3CDTF形式で指定します。
- [*[##o#]*] : 記事の所有者。登録されたユーザ名を指定します。
- [*[##t#]*] : 記事のタグのリスト。カンマ区切りで複数指定できます。

「[#submit#]」ボタンの横にある「[#modify timestamp#]」のチェックボックスがオンになっていると、更新時刻が現在時刻に自動修正されます。

管理者ユーザのみはタグに「[#*#]」を含めることができ、その場合、その記事は「凍結記事」になります。凍結記事は一般ユーザからは編集できないようになるので、勝手に編集されたくない場合に適宜利用してください。なお、このページも凍結記事です。

** Wiki記法

*** ブロック構造

属性定義部の下に記事の本文を書くことができます。任意の文字列を書くと、その各行は段落として解釈されます。空行は無視されます。また、行頭に以下の特殊な記号を置くことで論理構造を明確化させることができます。

- [*[#*#]*] : 見出し。「[#*#]」を並べた数で階層を表現できます。
- [*[#-#]*] : 番号なしリスト。「[#-#]」を並べた数で階層を表現できます。
- [*[#+#]*] : 番号付きリスト。「[#+#]」を並べた数で階層を表現できます。
- [*[#|#]*] : 表。列の区切りも「[#|#]」で表現します。「[#|#]」の代用で「[#,#]」も使えます。
- [*[#{{{#]*] : 整形済みテキスト開始。次に現れる「[#}}}#]」までの行をそのまま出力に反映します。
- [*[#@#]*] : 画像。挿入する画像のURLをその後に記述します。「[#|#]」で区切って幅と高さも指定できます。
- [*[#===#]*] : 罫線。記事を水平に区切って見やすくします。
- [*[###]*] : 非表示コメント。その行は出力に反映されません。

画像を挿入する際には、「[#@<#]」を使うと左寄せ、「[#@>#]」を使うと右寄せで本文を回り込ませることができます。回りこみを解除するには罫線を使うと便利です。

*** インライン構造

各行の文字列の中では括弧を使ったマークアップによってハイパーリンクを張ったり論理的な意味づけを付加したりすることができます。

- [*[#[=[[=]#]*] ... [*[#[=]]=]#]*] : ハイパーリンクを張る。囲んだ部分を名前とする記事にリンクする。
-- [*[#[=[[=]#]*] ... [*[#[=|=]#]*] ... [*[#[=]]=]#]*] : アンカー文字列とリンク先のURLを「[#|#]」の前後に指定する。
- [*[#[=[*=]#]*] ... [*[#*[=]=]#]*] : 強調表現。HTMLのstrong要素に相当します。
- [*[#[=["=]#]*] ... [*[#[="]=]#]*] : 引用表現。HTMLのcite要素に相当します。
- [*[#[=[+=]#]*] ... [*[#[=+]=]#]*] : 挿入表現。HTMLのins要素に相当します。
- [*[#[=[-=]#]*] ... [*[#[=-]=]#]*] : 削除表現。HTMLのdel要素に相当します。
- [*[#[=[#=]#]*] ... [*[##[=]=]#]*] : コード表現。HTMLのcode要素に相当します。
- [*[#[=[==]#]*] ... [*[#=]#]*] : 整形済み表現。囲んだ部分をそのまま出力します。

インライン構造は入れ子にすることができます。例えば、リンクを強調したい場合には、「[#[=[*[[hoge]]*]=]#]」などと記述します。

*** URLの特殊記法

URLを記述する部分には、以下の接頭辞をつけた文字列を記述して特殊な意味を持たせることができます。

- [*[#id:#]*] : 後続の数値をIDに持つ記事を参照します。
- [*[#name:#]*] : 後続の文字列を名前に持つ記事を参照します。
- [*[#param:#]*] : 後続の文字列をパラメータとしたTPの機能を参照します。
- [*[#upfile:#]*] : 後続の文字列をファイル名としたアップロードファイルを参照します。
- [*[#wpen:#]*] : 後続の文字列を名前に持つWikipedia英語版の記事を参照します。
- [*[#wpja:#]*] : 後続の文字列を名前に持つWikipedia日本語版の記事を参照します。

例えば、「foo」というアンカー文字列で「bar」という記事を参照したい場合、「[#[=[[foo|name:bar]]=]#]」と記述します。「ジョジョ」というアンカー文字列でWikipedia日本語版の「ジョジョの奇妙な冒険」という記事を参照したい場合「[#[=[[ジョジョ|wpja:ジョジョの奇妙な冒険]]=]#]」と記述します。

** サンプル

こんな感じになります。

{{{{{{
#! Tokyo Promenade
#c 2008-08-04T12:10:11+09:00
#m 2008-08-05T08:28:08+09:00
#o mikio
#t public,example

サンプルです。ここは第1段落です。改行で区切ると段落になります。

空行は無視されます。ここは第2段落です。私の名前は中野ではありません。

* 見出し（レベル1）
** 見出し（レベル2）
*** 見出し（レベル3）

- 番号なしリスト（レベル1）
-- 番号なしリスト（レベル2）
--- 番号なしリスト（レベル3）

+ 番号付きリスト（レベル1）
++ 番号付きリスト（レベル2）
+++ 番号付きリスト（レベル3）

# 画像
@ http://tokyocabinet.sf.net/logo.png
@ file:1249831173-logo.jpg|400|300

# 表
|name|sex|age|hobby
|John|male|32|tennis,golf
|Nancy|female|28|tennis,shopping
|Bill|male|16|guiter,soccer
|kate|feale|19|reading

# 整形済みテキスト
{{{
#include <stdio.h>
int main(int argc, char **argv){
  return 0;
}
}}}

私は[[Tokyo Promenade]]が大好きだ。[[TP|name:Tokyo Promenade]]という呼び方も素敵だ。
でも、[[Tokyo Cabinet|http://tokyocabinet.sourceforge.net]]はもっと好きだ。

[*強調*]と["引用"]と[+挿入+]と[-削除-]と[#コード#]も使いこなそう。
}}}}}}

* 記事を消すには

記事を編集する際に空のデータを提出すると、その記事は削除されます。

* 記事にコメントをつけるには

設定によっては、記事の下にコメント入力フォームが表示されることがあります。その際にはユーザ名と本文を入力して「[#submit#]」ボタンを押すことで記事に簡単にコメントをつけることができます。

* ファイルをアップロードするには

画像を記事に埋め込んだり、各種のアーカイブファイルを配布したりするために、ファイルアップロード機能を使うことができます。ナビゲーションバーの「[#Files#]」を選択すると、ファイル管理ページに移動します。既にアップロードされたファイルがある場合はその一覧が表示されるとともに、その下に新規アップロードのための入力フォームが表示されます。

「参照...」等のファイル選択ボタンを押してアップロードするファイルを選択してから、「[#upload#]」ボタンを押すと、そのファイルがサーバにアップロードされます。アップロードされたファイルには元のファイル名もしくは「[#name#]」の入力フォームで指定した名前がつけられてます。各ファイルは名前とタイムスタンプで識別されるので、同じ名前の複数のファイルをアップロードすることも可能です。

** ファイル用の相対URL

各記事からアップロードしたファイルをURLで参照する場合、ファイルのリストにある「[#(relative)#]」というアンカーに張られた「[#upfile:xxxx-yyyy.xyz#]」という形式の相対URLを指定してください。「[#@#]」で画像を挿入する際もこの形式のURLを使ってください。「[#http://#]」で始まる絶対URLを使ってもその時点では問題になりませんが、絶対URLだとサイトを移設したときにリンク切れになってしまうので、相対URLを使っておいた方が安心です。

* 読みやすい記事を書くには

** 個々の記事について

CMSによるサイトであっても、一般的なWebサイトと同様に合理的な情報設計が求められます。さしあたっては、以下の5点に気を配って記事を書くとよいでしょう。

- 各記事の名前をわかりやすいものにしましょう。
- 最初の段落で、その記事の概要を述べましょう。
- 長い記事では、適切に見出しをつけましょう。
- 記事が長すぎると感じたら、複数の記事に分割しましょう。

** サイト全体の構成について

サイト全体の適切な構成は、TPをWikiとしてとらえるか掲示板としてとらえるかで異なります。Wikiとしてとらえる場合には、関連する記事をまとめて読めるように、それらへのリンクを列挙したディレクトリページを作りましょう。また、そのディレクトリページをフロントページに設定して、ユーザの興味に基づく記事に効率的に誘導しましょう。

TPを掲示板としてとらえる場合には、フロントページを設定せずに、新着順の一覧を最初に見てもらうようにしましょう。過去の記事は記事内のリンクによって到達するよりも検索によって到達する方が効率的なので、リンクを張ることよりも語彙を統一することに気を配りましょう。タグ機能をうまく使うのもよい考えです。
